using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

products = Product[
    LibraryProduct(prefix, "libproj", :libproj),
    
    # complete contents of share/proj, must be kept up to date
    FileProduct(prefix, joinpath("share", "proj", "epsg"), :epsg_path),
    FileProduct(prefix, joinpath("share", "proj", "esri"), :esri_path)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/PROJBuilder/releases/download/v4.9.3-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, :glibc)    => ("$bin_prefix/PROJ.i686-linux-gnu.tar.gz", "91991672d963824408a3f223d19bf16d4fe0999baf4dd95c35b7bc4ef7f7fbeb"),
    Linux(:x86_64, :glibc)  => ("$bin_prefix/PROJ.x86_64-linux-gnu.tar.gz", "cc8e00301b854dfae1ee31363df01222b72414b99ea5455c2a37aab1b1ee29ba"),
    Linux(:aarch64, :glibc) => ("$bin_prefix/PROJ.aarch64-linux-gnu.tar.gz", "8ff89f480442aaaf4b1959a8c7ad042b6716e9b88ab0b9681c3d58732e924b27"),
    Linux(:armv7l, :glibc)  => ("$bin_prefix/PROJ.arm-linux-gnueabihf.tar.gz", "51b4388306ae43cf12acc72684e06756e44a01f9e7f183baeb7cc012201d23b7"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/PROJ.powerpc64le-linux-gnu.tar.gz", "4cbac1735b70da52f7bd77806323266ef28fa6dd151424f24875028a525c610e"),
    MacOS()                 => ("$bin_prefix/PROJ.x86_64-apple-darwin14.tar.gz", "11047f48eaddc207d1c11b81581cb39dbad6dc8caf22be7bd3bede9f80044958"),
    Windows(:i686)          => ("$bin_prefix/PROJ.i686-w64-mingw32.tar.gz", "ceef81114d13fa876713eb4aefc76c9bfae570d619e5d989c0c7414c7b55544e"),
    Windows(:x86_64)        => ("$bin_prefix/PROJ.x86_64-w64-mingw32.tar.gz", "b12cac7e1d00df2ad7338e0b635a0f583641897691142e3c5b8ac02c6cc444c7"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if platform_key() in keys(download_info)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    else
        error("Your platform $(Sys.MACHINE) is not supported by this package!")
    end

    # Finally, write out a deps.jl file
    write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
end
