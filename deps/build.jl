using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

products = Product[
    LibraryProduct(prefix, "libproj", :libproj),
    
    # complete contents of share/proj, must be kept up to date
    FileProduct(prefix, joinpath("share", "proj", "epsg"), :epsg_path),
    FileProduct(prefix, joinpath("share", "proj", "esri"), :esri_path)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/PROJBuilder/releases/download/v4.9.3-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, :glibc)    => ("$bin_prefix/PROJ.i686-linux-gnu.tar.gz", "18372ccb0fb75b95171c44c792aaccea33e74e1f6ac65745d540ae210e7eaaaa"),
    Linux(:x86_64, :glibc)  => ("$bin_prefix/PROJ.x86_64-linux-gnu.tar.gz", "f5b8e2215b345bce384de43b87668258c3dff488da20b43dc61dc6f7bb0f2c42"),
    Linux(:aarch64, :glibc) => ("$bin_prefix/PROJ.aarch64-linux-gnu.tar.gz", "c09237e0f80ed94a92af53297bf92d6a904a083e3544e74078f38da5a62a090b"),
    Linux(:armv7l, :glibc)  => ("$bin_prefix/PROJ.arm-linux-gnueabihf.tar.gz", "ddda5a2bcb91cc64a0ff7ca45f684adbb55249c5b0e6a3796024b2ddf5c321c9"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/PROJ.powerpc64le-linux-gnu.tar.gz", "c2a6bacf370df6cf2514f85b55e6590e4ef62951cfdc58f55698f9a5bb2cc27a"),
    MacOS()                 => ("$bin_prefix/PROJ.x86_64-apple-darwin14.tar.gz", "280525df165545ccfdd6482901984df143cbcad87109f6f3e1418329dd3609b9"),
    Windows(:i686)          => ("$bin_prefix/PROJ.i686-w64-mingw32.tar.gz", "68cc2d9bcdd17c351e612b41e49840692c6c1f1295e082e18ea62c2a36b0480c"),
    Windows(:x86_64)        => ("$bin_prefix/PROJ.x86_64-w64-mingw32.tar.gz", "8deafe6192146905d1c5b23c6efd5b9dd65e5e755da3680fe61f37c998d84991"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if platform_key() in keys(download_info)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    else
        error("Your platform $(Sys.MACHINE) is not supported by this package!")
    end

    # Finally, write out a deps.jl file
    write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
end
